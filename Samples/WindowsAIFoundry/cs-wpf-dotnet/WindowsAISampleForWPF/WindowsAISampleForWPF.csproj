<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net9.0-windows10.0.22621.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <UseWPF>true</UseWPF>
    <Platforms>AnyCPU;x64;ARM64</Platforms>
    <RuntimeIdentifiers>win-x64;win-arm64</RuntimeIdentifiers>
    <EnableMSIXTooling>true</EnableMSIXTooling>
    <PublishProfile>Properties\PublishProfiles\win10-$(Platform).pubxml</PublishProfile>
    <Configurations>Debug;Release</Configurations>
    <AppxPackageName>WindowsAISampleForWPF</AppxPackageName>
    <AppxBundleNameForOutput>WindowsAISampleForWPF</AppxBundleNameForOutput>
    <GenerateAppxPackageOnBuild>true</GenerateAppxPackageOnBuild>
  </PropertyGroup>

  <ItemGroup>
    <None Remove="Images\LockScreenLogo.scale-200.png" />
    <None Remove="Images\SplashScreen.scale-200.png" />
    <None Remove="Images\Square150x150Logo.scale-200.png" />
    <None Remove="Images\Square44x44Logo.scale-200.png" />
    <None Remove="Images\Square44x44Logo.targetsize-24_altform-unplated.png" />
    <None Remove="Images\StoreLogo.png" />
    <None Remove="Images\Wide310x150Logo.scale-200.png" />
  </ItemGroup>

  <ItemGroup>
    <Content Include="Images\SplashScreen.scale-200.png" />
    <Content Include="Images\Square150x150Logo.scale-200.png" />
    <Content Include="Images\Square44x44Logo.scale-200.png" />
    <Content Include="Images\Square44x44Logo.targetsize-24_altform-unplated.png" />
    <Content Include="Images\StoreLogo.png" />
    <Content Include="Images\Wide310x150Logo.scale-200.png" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.WindowsAppSDK" Version="1.8.250515001-experimental2" />
  </ItemGroup>

  <ItemGroup>
    <Folder Include="Properties\PublishProfiles\" />
  </ItemGroup>

  <PropertyGroup>
    <PackageCertificateKeyFile Condition="'$(RepoTestCertificatePassword)' == ''">$(RepoTestCertificatePFX)</PackageCertificateKeyFile>
    <AppxPackageSigningEnabled Condition="Exists('$(PackageCertificateKeyFile)')" >true</AppxPackageSigningEnabled>
  </PropertyGroup>

  <PropertyGroup Condition="'$(RepoTestCertificatePFX)' == ''">
    <RepoTestCertificatePFX>$(MSBuildThisFileDirectory).user\WindowsAISampleForWPF.certificate.sample.pfx</RepoTestCertificatePFX>
  </PropertyGroup>
  <PropertyGroup Condition="'$(RepoTestCertificatePWD)' == ''">
    <RepoTestCertificatePWD>$(MSBuildThisFileDirectory).user\WindowsAISampleForWPF.certificate.sample.pwd</RepoTestCertificatePWD>
  </PropertyGroup>
  <PropertyGroup Condition="'$(RepoTestCertificateCer)' == ''">
    <RepoTestCertificateCer>$(MSBuildThisFileDirectory).user\WindowsAISampleForWPF.certificate.sample.cer</RepoTestCertificateCer>
  </PropertyGroup>
  <PropertyGroup Condition="('$(RepoTestCertificatePWD)' != '') and Exists('$(RepoTestCertificatePWD)')">
    <RepoTestCertificatePassword>$([System.IO.File]::ReadAllText('$(RepoTestCertificatePWD)').TrimEnd())</RepoTestCertificatePassword>
    <RepoTestCertificatePasswordRedacted>...redacted...</RepoTestCertificatePasswordRedacted>
  </PropertyGroup>

  <Target Name="SignMSIX"
          AfterTargets="Build"
          Condition="'$(BuildingInsideVisualStudio)' != 'true'"
          Outputs="@(BinplaceItemCopied)">
    <ItemGroup>
      <BinplaceItem Include="$(RepoTestCertificateCer)" />
    </ItemGroup>
    <PropertyGroup Condition="'$(RepoTestCertificatePassword)' != ''">
      <_SignMsix_Executable>signtool.exe</_SignMsix_Executable>
      <_SignMsix_Parameters>/fd SHA256</_SignMsix_Parameters>
      <_SignMsixPassword_Parameters>/p "$(RepoTestCertificatePassword)"</_SignMsixPassword_Parameters>
      <_SignMsixCommand>$(_SignMsix_Executable) sign $(_SignMsix_Parameters) $(_SignMsix_Options) /f "$(RepoTestCertificatePFX)" $(_SignMsixPassword_Parameters) "$(AppxPackageDir)$(AppxPackageName)_Test\$(AppxBundleNameForOutput).msix"</_SignMsixCommand>
    </PropertyGroup>
    <Exec Command="$(_SignMsixCommand)"  Condition="'$(RepoTestCertificatePassword)' != ''"/>
    <Copy SourceFiles="@(BinplaceItem)"
      DestinationFiles="@(BinplaceItem->'$(AppxPackageDir)$(AppxPackageName)_Test\%(Filename)%(Extension)')"
      SkipUnchangedFiles="true">
        <Output TaskParameter="CopiedFiles" ItemName="BinplaceItemCopied" />
    </Copy>
  </Target>

</Project>
